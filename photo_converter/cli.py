import logging
from pathlib import Path
from PIL import Image
import pillow_heif
import typer

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É HEIC –¥–ª—è Pillow
pillow_heif.register_heif_opener()


def configure_logging(verbose: bool, log_file: Path | None):
    handlers = [logging.StreamHandler()]
    if log_file:
        handlers.append(logging.FileHandler(str(log_file), encoding="utf-8"))
    logging.basicConfig(
        level=logging.DEBUG if verbose else logging.INFO,
        format="%(message)s",
        handlers=handlers,
    )


def main(
        dcim_path: Path = typer.Argument(..., help="–ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ DCIM"),
        dry_run: bool = typer.Option(False, "--dry-run", help="–¢–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è, –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è—Ç—å"),
        verbose: bool = typer.Option(False, "--verbose", "-v", help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥"),
        log_file: Path = typer.Option(None, "--log-file", help="–ü—É—Ç—å –∫ –ª–æ–≥-—Ñ–∞–π–ª—É"),
):
    """
    –£–¥–∞–ª—è–µ—Ç .NEF –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç .HEIC ‚Üí .JPG —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤.
    """
    configure_logging(verbose, log_file)

    if not dcim_path.exists() or not dcim_path.is_dir():
        logging.error(f"–ü—É—Ç—å {dcim_path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π.")
        raise typer.Exit(code=1)

    logging.info(f"üìÅ –û–±—Ä–∞–±–æ—Ç–∫–∞: {dcim_path.resolve()}")

    total_before = sum(1 for _ in dcim_path.rglob("*") if _.is_file())
    nef_deleted = 0
    heic_converted = 0

    for file in dcim_path.rglob("*"):
        if not file.is_file():
            continue

        suffix = file.suffix.lower()

        if suffix == ".nef":
            if dry_run:
                logging.info(f"[dry-run] üóëÔ∏è  –ë—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω: {file}")
            else:
                try:
                    file.unlink()
                    nef_deleted += 1
                    logging.info(f"üóëÔ∏è  –£–¥–∞–ª—ë–Ω: {file}")
                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {file}: {e}")

        elif suffix == ".heic":
            jpg_path = file.with_suffix(".jpg")
            if dry_run:
                logging.info(f"[dry-run] ‚úÖ –ë—É–¥–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: {file} ‚Üí {jpg_path}")
            else:
                try:
                    with Image.open(file) as img:
                        rgb_img = img.convert("RGB")
                        rgb_img.save(jpg_path, "JPEG", quality=95)
                    file.unlink()
                    heic_converted += 1
                    logging.info(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏ —É–¥–∞–ª—ë–Ω: {file} ‚Üí {jpg_path}")
                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ {file}: {e}")

    total_after = sum(1 for _ in dcim_path.rglob("*") if _.is_file())

    logging.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    logging.info(f"  –í—Å–µ–≥–æ –î–û     : {total_before}")
    logging.info(f"  –£–¥–∞–ª–µ–Ω–æ .NEF : {nef_deleted}")
    logging.info(f"  HEIC ‚Üí JPG   : {heic_converted}")
    logging.info(f"  –í—Å–µ–≥–æ –ü–û–°–õ–ï  : {total_after if not dry_run else total_before}")


if __name__ == "__main__":
    typer.run(main)
