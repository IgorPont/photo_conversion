"""
CLI-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ DCIM.

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    - —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ .NEF
    - –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é .HEIC ‚Üí .JPG —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤
    - –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö .JPG —Ñ–∞–π–ª–æ–≤ –≤ –æ–¥–Ω—É –ø–∞–ø–∫—É —Å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º (1.jpg, 2.jpg, ...)
    - dry-run —Ä–µ–∂–∏–º, –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥

–ü—Ä–∏–º–µ—Ä—ã:
    poetry run python -m photo_converter.cli process objects_to_convert/DCIM
    poetry run python -m photo_converter.cli rename objects_to_convert/DCIM output
"""

import logging
from pathlib import Path
import typer
from photo_converter.del_nef_and_covert_heic import process_dcim
from photo_converter.rename_and_number_images import rename_and_collect_images

# –°–æ–∑–¥–∞—ë–º CLI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = typer.Typer(help="–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: —É–¥–∞–ª–µ–Ω–∏–µ .NEF, –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è .HEIC, –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ .JPG")


def configure_logging(verbose: bool, log_file: Path | None):
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å –∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –≤ —Ñ–∞–π–ª.

    :param verbose: –µ—Å–ª–∏ True ‚Äî —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —É—Ä–æ–≤–µ–Ω—å DEBUG, –∏–Ω–∞—á–µ INFO
    :param log_file: –ø—É—Ç—å –∫ –ª–æ–≥-—Ñ–∞–π–ª—É, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω ‚Äî –ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∏ —Ç—É–¥–∞
    """
    handlers = [logging.StreamHandler()]
    if log_file:
        handlers.append(logging.FileHandler(str(log_file), encoding="utf-8"))
    logging.basicConfig(
        level=logging.DEBUG if verbose else logging.INFO,
        format="%(message)s",
        handlers=handlers,
    )


@app.command("process")
def process_images(
        dcim_path: Path = typer.Argument(..., help="–ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ DCIM"),
        dry_run: bool = typer.Option(False, "--dry-run", help="–¢–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è, –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è—Ç—å"),
        verbose: bool = typer.Option(False, "--verbose", "-v", help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥"),
        log_file: Path = typer.Option(None, "--log-file", help="–ü—É—Ç—å –∫ –ª–æ–≥-—Ñ–∞–π–ª—É"),
):
    """
    –£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª—ã .NEF –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç .HEIC ‚Üí .JPG –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.
    """
    configure_logging(verbose, log_file)
    stats = process_dcim(dcim_path, dry_run=dry_run)

    if stats:
        logging.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        logging.info(f"  –í—Å–µ–≥–æ –î–û     : {stats['total_before']}")
        logging.info(f"  –£–¥–∞–ª–µ–Ω–æ .NEF : {stats['nef_deleted']}")
        logging.info(f"  HEIC ‚Üí JPG   : {stats['heic_converted']}")
        logging.info(f"  –í—Å–µ–≥–æ –ü–û–°–õ–ï  : {stats['total_after']}")
    else:
        logging.warning("–ù–∏—á–µ–≥–æ –Ω–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.")


@app.command("rename")
def rename_images(
        dcim_path: Path = typer.Argument(..., help="–ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ DCIM"),
        output_dir: Path = typer.Argument(..., help="–ü–∞–ø–∫–∞, –∫—É–¥–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Ç–æ–≥–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"),
        dry_run: bool = typer.Option(False, "--dry-run", help="–¢–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è, –Ω–µ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã"),
        verbose: bool = typer.Option(False, "--verbose", "-v", help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥"),
        log_file: Path = typer.Option(None, "--log-file", help="–ü—É—Ç—å –∫ –ª–æ–≥-—Ñ–∞–π–ª—É"),
):
    """
    –û–±—Ö–æ–¥–∏—Ç –ø–æ–¥–ø–∞–ø–∫–∏ DCIM, —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∫–æ–ø–∏—Ä—É–µ—Ç –∏—Ö –≤ –Ω–æ–≤—É—é –ø–∞–ø–∫—É —Å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π.
    """

    configure_logging(verbose, log_file)
    rename_and_collect_images(dcim_path, output_dir, dry_run=dry_run)


if __name__ == "__main__":
    app()
