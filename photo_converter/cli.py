"""
CLI-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ DCIM.

–í—ã–ø–æ–ª–Ω—è–µ—Ç:
- —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º `.NEF`
- –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é —Ñ–∞–π–ª–æ–≤ `.HEIC` –≤ `.JPG` —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤
- –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π (—Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª)
- –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ä–µ–∂–∏–º–∞ dry-run
- –ø–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –ø–æ –∫–ª—é—á—É `--verbose`

–ó–∞–ø—É—Å–∫:
    poetry run python -m photo_converter.cli process objects_to_convert/DCIM
"""

import logging
from pathlib import Path
import typer
from photo_converter.del_nef_and_covert_heic import process_dcim

# –°–æ–∑–¥–∞—ë–º CLI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = typer.Typer(help="–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è .NEF –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ .HEIC ‚Üí .JPG")


def configure_logging(verbose: bool, log_file: Path | None):
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å –∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –≤ —Ñ–∞–π–ª.

    :param verbose: –µ—Å–ª–∏ True ‚Äî —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —É—Ä–æ–≤–µ–Ω—å DEBUG, –∏–Ω–∞—á–µ INFO
    :param log_file: –ø—É—Ç—å –∫ –ª–æ–≥-—Ñ–∞–π–ª—É, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω ‚Äî –ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∏ —Ç—É–¥–∞
    """
    handlers = [logging.StreamHandler()]
    if log_file:
        handlers.append(logging.FileHandler(str(log_file), encoding="utf-8"))
    logging.basicConfig(
        level=logging.DEBUG if verbose else logging.INFO,
        format="%(message)s",
        handlers=handlers,
    )


@app.command()
def process(
        dcim_path: Path = typer.Argument(..., help="–ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ DCIM"),
        dry_run: bool = typer.Option(False, "--dry-run", help="–¢–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è, "
                                                              "–Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è—Ç—å"),
        verbose: bool = typer.Option(False, "--verbose", "-v", help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥"),
        log_file: Path = typer.Option(None, "--log-file", help="–ü—É—Ç—å –∫ –ª–æ–≥-—Ñ–∞–π–ª—É"),
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:
        - —É–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª—ã .NEF
        - –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç .HEIC –≤ .JPG
        - —É–¥–∞–ª—è–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–µ .HEIC –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏

    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç dry-run —Ä–µ–∂–∏–º, –ø–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –∏ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª.
    """
    configure_logging(verbose, log_file)

    stats = process_dcim(dcim_path, dry_run=dry_run)

    if stats:
        logging.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        logging.info(f"  –í—Å–µ–≥–æ –î–û     : {stats['total_before']}")
        logging.info(f"  –£–¥–∞–ª–µ–Ω–æ .NEF : {stats['nef_deleted']}")
        logging.info(f"  HEIC ‚Üí JPG   : {stats['heic_converted']}")
        logging.info(f"  –í—Å–µ–≥–æ –ü–û–°–õ–ï  : {stats['total_after']}")
    else:
        logging.warning("–ù–∏—á–µ–≥–æ –Ω–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.")


if __name__ == "__main__":
    app()
