import logging
from pathlib import Path
from PIL import Image
import pillow_heif

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ HEIC –¥–ª—è Pillow
pillow_heif.register_heif_opener()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO, format="%(message)s")


def process_dcim(dcim_path: Path) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–∏ –ø–∞–ø–∫–∏ DCIM:
        - —É–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º `.NEF`
        - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç `.HEIC` –≤ `.JPG` –∏ —É–¥–∞–ª—è–µ—Ç –∏—Å—Ö–æ–¥–Ω–∏–∫

    –¢–∞–∫–∂–µ –≤–µ–¥—ë—Ç –ø–æ–¥—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.
    """
    if not dcim_path.exists() or not dcim_path.is_dir():
        logging.warning(f"–ü—É—Ç—å {dcim_path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π.")
        return

    logging.info(f"üìÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {dcim_path.resolve()}")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_before = sum(1 for _ in dcim_path.rglob("*") if _.is_file())
    nef_deleted = 0
    heic_converted = 0

    for file in dcim_path.rglob("*"):
        if not file.is_file():
            continue

        suffix = file.suffix.lower()

        if suffix == ".nef":
            try:
                file.unlink()
                nef_deleted += 1
                logging.info(f"üóëÔ∏è  –£–¥–∞–ª—ë–Ω .NEF —Ñ–∞–π–ª: {file}")
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {file}: {e}")

        elif suffix == ".heic":
            jpg_path = file.with_suffix(".jpg")
            try:
                with Image.open(file) as img:
                    rgb_img = img.convert("RGB")
                    rgb_img.save(jpg_path, "JPEG", quality=95)
                file.unlink()
                heic_converted += 1
                logging.info(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏ —É–¥–∞–ª—ë–Ω: {file} ‚Üí {jpg_path}")
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ {file}: {e}")

    total_after = sum(1 for _ in dcim_path.rglob("*") if _.is_file())

    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç
    logging.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
    logging.info(f"  –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –î–û –æ–±—Ä–∞–±–æ—Ç–∫–∏: {total_before}")
    logging.info(f"  –£–¥–∞–ª–µ–Ω–æ .NEF —Ñ–∞–π–ª–æ–≤      : {nef_deleted}")
    logging.info(f"  –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ .HEIC     : {heic_converted}")
    logging.info(f"  –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –ü–û–°–õ–ï       : {total_after}")


if __name__ == "__main__":
    dcim_dir = Path("objects_to_convert/DCIM")
    process_dcim(dcim_dir)
