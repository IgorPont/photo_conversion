"""
–ú–æ–¥—É–ª—å –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ DCIM.

–í—ã–ø–æ–ª–Ω—è–µ—Ç:
    - —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –æ–±—Ö–æ–¥ –≤—Å–µ—Ö –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    - —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º `.NEF`
    - –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é —Ñ–∞–π–ª–æ–≤ `.HEIC` –≤ `.JPG` (—Å —É–¥–∞–ª–µ–Ω–∏–µ–º –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤)
    - –ø–æ–¥–¥–µ—Ä–∂–∫—É dry-run —Ä–µ–∂–∏–º–∞
    - –≤–æ–∑–≤—Ä–∞—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏

–ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–∑ CLI –∏–ª–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º–æ–≥–æ –º–æ–¥—É–ª—è.
"""

import logging
from pathlib import Path
from PIL import Image
import pillow_heif

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ HEIC –¥–ª—è Pillow
pillow_heif.register_heif_opener()


def process_dcim(dcim_path: Path, dry_run: bool = False) -> dict | None:
    """
    –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ DCIM:
        - —É–¥–∞–ª—è–µ—Ç `.NEF` —Ñ–∞–π–ª—ã
        - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç `.HEIC` –≤ `.JPG` –∏ —É–¥–∞–ª—è–µ—Ç –∏—Å—Ö–æ–¥–Ω–∏–∫–∏

    :param dcim_path: –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ DCIM
    :param dry_run: –µ—Å–ª–∏ True, –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è, —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è
    :return: —Å–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–ª–∏ None, –µ—Å–ª–∏ –ø—É—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    """
    if not dcim_path.exists() or not dcim_path.is_dir():
        logging.warning(f"–ü—É—Ç—å {dcim_path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π.")
        return None

    logging.info(f"üìÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {dcim_path.resolve()}")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_before = sum(1 for _ in dcim_path.rglob("*") if _.is_file())
    nef_deleted = 0
    heic_converted = 0

    for file in dcim_path.rglob("*"):
        if not file.is_file():
            continue

        suffix = file.suffix.lower()

        if suffix == ".nef":
            if dry_run:
                logging.info(f"[dry-run] üóëÔ∏è  –ë—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω: {file}")
            else:
                try:
                    file.unlink()
                    nef_deleted += 1
                    logging.info(f"üóëÔ∏è  –£–¥–∞–ª—ë–Ω .NEF —Ñ–∞–π–ª: {file}")
                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {file}: {e}")

        elif suffix == ".heic":
            jpg_path = file.with_suffix(".jpg")
            if dry_run:
                logging.info(f"[dry-run] ‚úÖ –ë—É–¥–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: {file} ‚Üí {jpg_path}")
            else:
                try:
                    with Image.open(file) as img:
                        rgb_img = img.convert("RGB")
                        rgb_img.save(jpg_path, "JPEG", quality=95)
                    file.unlink()
                    heic_converted += 1
                    logging.info(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏ —É–¥–∞–ª—ë–Ω: {file} ‚Üí {jpg_path}")
                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ {file}: {e}")

    total_after = sum(1 for _ in dcim_path.rglob("*") if _.is_file())

    return {
        "total_before": total_before,
        "nef_deleted": nef_deleted,
        "heic_converted": heic_converted,
        "total_after": total_after if not dry_run else total_before,
    }


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    dcim_dir = Path("objects_to_convert/DCIM")
    stats = process_dcim(dcim_dir)
    if stats:
        logging.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
        logging.info(f"  –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –î–û –æ–±—Ä–∞–±–æ—Ç–∫–∏: {stats['total_before']}")
        logging.info(f"  –£–¥–∞–ª–µ–Ω–æ .NEF —Ñ–∞–π–ª–æ–≤      : {stats['nef_deleted']}")
        logging.info(f"  –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ .HEIC     : {stats['heic_converted']}")
        logging.info(f"  –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –ü–û–°–õ–ï       : {stats['total_after']}")
