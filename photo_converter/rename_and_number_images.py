"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è JPEG-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –ø–æ–¥–ø–∞–ø–æ–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ DCIM.

–û—Å–Ω–æ–≤–Ω–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π:
    - –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø—Ä–æ—Ö–æ–¥ –ø–æ –ø–æ–¥–ø–∞–ø–∫–∞–º DCIM –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    - –í –∫–∞–∂–¥–æ–π –ø–∞–ø–∫–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø–æ –∏–º–µ–Ω–∏
    - –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º `.jpg` –∏ `.jpeg` –≤ –Ω–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    - –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 1.jpg, 2.jpg, ... (—Å–∫–≤–æ–∑–Ω–∞—è –Ω—É–º–µ—Ä–∞—Ü–∏—è)
    - –ù–∞–∑–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–π –ø–∞–ø–∫–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-07-26_renamed_images)

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–µ–∂–∏–º dry-run, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ —á–∞—Å—Ç—å CLI-–∫–æ–º–∞–Ω–¥—ã `rename` (—Å–º. photo_converter.cli).
"""

import logging
from datetime import datetime
from pathlib import Path


def rename_and_collect_images(dcim_path: Path, output_root: Path, dry_run: bool = False) -> None:
    """
    –ü–æ–æ—á–µ—Ä—ë–¥–Ω–æ –æ–±—Ö–æ–¥–∏—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∞–ø–∫–∏ DCIM –∏:
      - —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–π –ø–∞–ø–∫–∏ –ø–æ –∏–º–µ–Ω–∏
      - –∫–æ–ø–∏—Ä—É–µ—Ç –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç –≤—Å–µ JPEG-—Ñ–∞–π–ª—ã (jpg, jpeg) –≤ —Ñ–æ—Ä–º–∞—Ç 1.jpg, 2.jpg, ...
      - —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ –æ–±—â—É—é –Ω–æ–≤—É—é –ø–∞–ø–∫—É, –Ω–∞–∑–≤–∞–Ω–Ω—É—é –ø–æ –¥–∞—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

    :param dcim_path: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ DCIM
    :param output_root: –ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞, –≥–¥–µ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –∏—Ç–æ–≥–æ–≤–∞—è –ø–∞–ø–∫–∞
    :param dry_run: –ï—Å–ª–∏ True ‚Äî —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è, –Ω–µ –∫–æ–ø–∏—Ä—É—è —Ñ–∞–π–ª—ã
    """
    if not dcim_path.exists() or not dcim_path.is_dir():
        logging.warning(f"–ü—É—Ç—å {dcim_path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π.")
        return

    date_str = datetime.now().strftime("%Y-%m-%d")
    output_dir = output_root / f"{date_str}_renamed_images"

    if not dry_run:
        output_dir.mkdir(parents=True, exist_ok=True)

    logging.info(f"üìÅ –ß—Ç–µ–Ω–∏–µ –∏–∑: {dcim_path.resolve()}")
    logging.info(f"üì¶ –ò—Ç–æ–≥–æ–≤–∞—è –ø–∞–ø–∫–∞: {output_dir.resolve()}")

    counter = 1
    folders = sorted([f for f in dcim_path.iterdir() if f.is_dir()])
    total_images = 0

    for folder in folders:
        # –£—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è JPEG
        jpeg_files = sorted(
            f for f in folder.iterdir()
            if f.is_file() and f.suffix.lower() in {".jpg", ".jpeg"}
        )

        for file in jpeg_files:
            new_filename = f"{counter}.jpg"
            destination = output_dir / new_filename

            if dry_run:
                logging.info(f"[dry-run] {file.name} ‚Üí {destination.name}")
            else:
                try:
                    destination.write_bytes(file.read_bytes())
                    logging.info(f"üì∑ {file.name} ‚Üí {destination.name}")
                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ {file}: {e}")

            counter += 1
            total_images += 1

    logging.info("üìä –ó–∞–≤–µ—Ä—à–µ–Ω–æ.")
    logging.info(f"  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–∞–ø–æ–∫          : {len(folders)}")
    logging.info(f"  –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π : {total_images}")
    logging.info(f"  –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ: {counter - 1}")
