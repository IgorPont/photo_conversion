"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è .JPG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫ DCIM.

–§—É–Ω–∫—Ü–∏—è `rename_and_collect_images`:
    - –ø–æ–æ—á–µ—Ä—ë–¥–Ω–æ –æ–±—Ö–æ–¥–∏—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞–ø–∫–∏ –≤–Ω—É—Ç—Ä–∏ DCIM
    - –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–π –ø–∞–ø–∫–∏ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç .JPG-—Ñ–∞–π–ª—ã –ø–æ –∏–º–µ–Ω–∏
    - –∫–æ–ø–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –Ω–æ–≤—É—é –ø–∞–ø–∫—É —Å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º (1.jpg, 2.jpg, ...)
    - –∏–º—è –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –ø–æ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–µ –∏ –¥–æ–±–∞–≤–∫–µ `_renamed_images`
    - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–µ–∂–∏–º dry-run
"""

import logging
from datetime import datetime
from pathlib import Path


def rename_and_collect_images(dcim_path: Path, output_root: Path, dry_run: bool = False) -> None:
    """
    –ü–æ–æ—á–µ—Ä—ë–¥–Ω–æ –æ–±—Ö–æ–¥–∏—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∞–ø–∫–∏ DCIM –∏:
      - —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ –ø–∞–ø–∫–∏ –ø–æ –∏–º–µ–Ω–∏
      - –∫–æ–ø–∏—Ä—É–µ—Ç –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç 1.jpg, 2.jpg, ...
      - —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –æ–±—â—É—é –Ω–æ–≤—É—é –ø–∞–ø–∫—É, –Ω–∞–∑–≤–∞–Ω–Ω—É—é –ø–æ –¥–∞—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

    :param dcim_path: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ DCIM
    :param output_root: –ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞, –≥–¥–µ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –∏—Ç–æ–≥–æ–≤–∞—è –ø–∞–ø–∫–∞
    :param dry_run: –ï—Å–ª–∏ True ‚Äî –≤—ã–≤–æ–¥–∏—Ç –¥–µ–π—Å—Ç–≤–∏—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    """
    if not dcim_path.exists() or not dcim_path.is_dir():
        logging.warning(f"–ü—É—Ç—å {dcim_path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π.")
        return

    date_str = datetime.now().strftime("%Y-%m-%d")
    output_dir = output_root / f"{date_str}_renamed_images"

    if not dry_run:
        output_dir.mkdir(parents=True, exist_ok=True)

    logging.info(f"üìÅ –ß—Ç–µ–Ω–∏–µ –∏–∑: {dcim_path.resolve()}")
    logging.info(f"üì¶ –ò—Ç–æ–≥–æ–≤–∞—è –ø–∞–ø–∫–∞: {output_dir.resolve()}")

    counter = 1
    total_found = 0
    folders = sorted([f for f in dcim_path.iterdir() if f.is_dir()])

    for folder in folders:
        jpg_files = sorted(f for f in folder.iterdir() if f.suffix.lower() == ".jpg")
        total_found += len(jpg_files)

        for file in jpg_files:
            new_filename = f"{counter}.jpg"
            destination = output_dir / new_filename

            if dry_run:
                logging.info(f"[dry-run] {file.name} ‚Üí {destination.name}")
            else:
                try:
                    destination.write_bytes(file.read_bytes())
                    logging.info(f"üì∑ {file.name} ‚Üí {destination.name}")
                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ {file}: {e}")

            counter += 1

    logging.info("üìä –ó–∞–≤–µ—Ä—à–µ–Ω–æ.")
    logging.info(f"  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–∞–ø–æ–∫         : {len(folders)}")
    logging.info(f"  –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ: {total_found}")
    logging.info(f"  –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ: {counter - 1}")
